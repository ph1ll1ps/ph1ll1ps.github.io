directive rules {
unbind(P,Q,D!i) :-
  P = C [D!i] [D'!i], toehold(D), 
  Q = C [D] [D'], not adjacent(D!i,_,P).

adjacent(D!i,E!j,P) :- P = C [D!i E!j] [E'!j D'!i].
adjacent(D!i,E!j,P) :- P = C [E!j D!i] [D'!i E'!j].

bind(P1,P2,Q,D!i) :- 
  P1 = C1 [D], P2 = C2 [D'], compl(D, D'), 
  Q = C1 [D!i] | C2 [D'!i], freshBond(D!i, P1|P2).
  
displace(P,Q,E!j,D!i) :-
  P = C [E!j D] [D!i] [D'!i E'!j],
  Q = C [E!j D!i] [D] [D'!i E'!j].

displaceL(P,Q,E!j,D!i) :- 
  P = C [D!i] [D E!j] [E'!j D'!i],
  Q = C [D] [D!i E!j] [E'!j D'!i].

cover(P,Q,E!j,D!i) :-
  P = C [E!j D] [D' E'!j], compl(D, D'), 
  Q = C [E!j D!i] [D'!i E'!j], freshBond(D!i,P).

coverL(P,Q,E!j,D!i) :- 
  P = C [D E!j] [E'!j D'], compl(D, D'), 
  Q = C [D!i E!j] [E'!j D'!i], freshBond(D!i,P).
  
binds(P1,P2,R,D!i,[D#L]) :- bind(P1,P2,Q,D!i), not coverL(Q,_,D!i,_), covers(Q,R,D!i,L).
binds(P1,P2,Q,D!i,[D]) :- bind(P1,P2,Q,D!i), not coverL(Q,_,D!i,_), not cover(Q,_,D!i,_).

displaces(P,R,E!j,[D#L]) :- displace(P,Q,E!j,D!i), displaces(Q,R,D!i,L).
displaces(P,Q,E!j,[D]) :- displace(P,Q,E!j,D!i), not displace(Q,_,D!i,_).

displacesL(P,R,E!j,[D#L]) :- displaceL(P,Q,E!j,D!i), displacesL(Q,R,D!i,L).
displacesL(P,Q,E!j,[D]) :- displaceL(P,Q,E!j,D!i), not displaceL(Q,_,D!i,_).

covers(P,R,E!j,[D#L]) :- cover(P,Q,E!j,D!i), covers(Q,R,D!i,L).
covers(P,Q,E!j,[D]) :- cover(P,Q,E!j,D!i), not cover(Q,_,D!i,_).

coversL(P,R,E!j,[D#L]) :- coverL(P,Q,E!j,D!i), coversL(Q,R,D!i,L).
coversL(P,Q,E!j,[D]) :- coverL(P,Q,E!j,D!i), not coverL(Q,_,D!i,_).

unbinds(P,R,D!i,[D#L]) :- 
  P = C [D!i E!j] [E'!j D'!i], toehold(D), not boundL(D!i,_,P), 
  Q = C [D E!j] [E'!j D'], unbinds(Q,R,E!j,L). 
boundL(D!i,E!j,P) :- P = C [E!j D!i] [D'!i E'!j].
unbinds(P,Q,D!i,[D]) :- unbind(P,Q,D!i).

find(D,Type,Rate):- rate(D,Type,Rate).
find(D,Type,Rate):- default(D,Type,Rate), not rate(D,Type,_).

//order of find and binds clauses could be reversed.
slow(P1, P2, Rate, Q) :- find(L, "bind", Rate), binds(P1,P2,Q,_,L). //, productive(Q,_,_!i,L).
fast(P, Rate, Q) :- displaces(P,Q,_,L), find(L, "displace", Rate).
fast(P, Rate, Q) :- displacesL(P,Q,_,L), find(L, "displace", Rate).
fast(P, Rate, Q) :- covers(P,Q,_,L), find(L, "cover", Rate).
fast(P, Rate, Q) :- coversL(P,Q,_,L), find(L, "cover", Rate).
fast(P, Rate, Q) :- unbinds(P,Q,_,L), find(L, "unbind", Rate).

productive(P,Q,E!j,L) :- displaces(P,Q,E!j,L).
productive(P,Q,E!j,L) :- displacesL(P,Q,E!j,L).
productive(P,Q,E!j,L) :- covers(P,Q,E!j,L).
productive(P,Q,E!j,L) :- coversL(P,Q,E!j,L).

mergestep(P,Q,V) :- fast(P,_,Q), not member(Q,V).
merge(P,P,V) :- not fast(P,_,_).
merge(P,R,V) :- mergestep(P,Q,V), merge(Q,R,[Q#V]).

infinite([P1; P2], Rate, R) :- slow(P1, P2, Rate, Q), merge(Q,R,[(P1|P2);Q]).
infinite([P], Rate, R) :- slow(P, Rate, Q), merge(Q,R,[P;Q]).

detailed([P1; P2], Rate, Q):- slow(P1, P2, Rate, Q).
detailed([P], Rate, Q) :- slow(P, Rate, Q).
detailed([P], Rate, Q) :- fast(P, Rate, Q).

default([_],"unbind",0.1).
//default(_,"bind",0.0003).
default(_,"displace",1.0).
default(_,"cover",1.0).

polymerase(P,Q,A!i,B!j) :- 
  P = C [A!i>]     [B'   A'!i], compl(B, B'), 
  Q = C [A!i B!j>] [B'!j A'!i], freshBond(B!j, P).

polymerase(P,Q,A!i,B!j) :- //strand displacing polymerase
  P = C [A!i>]     [B'!j A'!i] [B!j],
  Q = C [A!i B!j>] [B'!j A'!i] [B].

polymerases(P,R,A!i,[B#L]) :- polymerase(P,Q,A!i,B!j), polymerases(Q,R,B!j,L).
polymerases(P,Q,A!i,[B]) :- polymerase(P,Q,A!i,B!j), not polymerase(Q,_,_,_).

exonuclease(P,R,A@p,[A#L]) :- 
  P = C[<A@p B], unbound(A), Q = C[<B@q], not protected(A), exonuclease(Q,R,B@q,L).
exonuclease(P,Q,A@p,[A]) :- P = C[<A@p>] , unbound(A), Q = C[nil], not protected(A).
protected(_ { "O" }).

reaction([P], Rate, Q) :- polymerases(P,Q,_,L), find(L,"polymerase", Rate).
reaction([P], Rate, Q) :- exonuclease(P,Q,_,L), find(L,"exonuclease",Rate).

//The following specifies detailed compilation mode
reaction([P1; P2], Rate, R) :- detailed([P1; P2], Rate, R).
reaction([P], Rate, R) :- detailed([P], Rate, R).

//The following identifies specific motifs for nicking enzymes
reaction([P], Rate, Q) :- 
  recognition([A1;A2;A3;A4;A5]), find([A1;A2;A3;A4;A5],"nickase",Rate),
  P = C [A1!i1 A2!i2 A3!i3 A4!i4 A5!i5 N1 N2 N3 N4 B!j]     
        [B'!j N4' N3' N2' N1' A5'!i5 A4'!i4 A3'!i3 A2'!i2 A1'!i1],
  Q = C [A1!i1 A2!i2 A3!i3 A4!i4 A5!i5 N1 N2 N3 N4> | <B!j] 
        [B'!j N4' N3' N2' N1' A5'!i5 A4'!i4 A3'!i3 A2'!i2 A1'!i1].

//default(_,"bind",0.0003). //NB comment this out in the Classic DSD rules
//Require at least eleven consecutive domains to bind, to prevent polymers
default([_; _; _; _; _; _; _; _; _; _ ; _ # L ],"bind",0.0003). 

default(_,"polymerase",0.2833).
default(_,"exonuclease",0.0053).
default(_,"nickase",0.05).

recognition([c^*; a^; c^*; a^*; c^]).
alpha([a^*; c^; c^*; a^; c^*; a^*; c^; a^*; c^*; a^*; a^*]).
beta([a^; a^*; c^*; a^; c^*; a^*; c^; a^; a^*; c^*; c^]).
inhibitor([a^; c^*; a^*; c^; a^*; c^*; a^*; a^*; a^*; c^; c^*; a^; c^*; a^*; a^; a^]).
inhibit([a^; c^*; a^*; c^; a^*; c^*; a^*; a^*; a^*; c^; c^*; a^; c^*; a^*]).

rate(L,"polymerase", "kIpol") :- inhibitor(L).
rate(L,"polymerase", "kpol") :- alpha(L).
rate(L,"polymerase", "kpol") :- beta(L).
rate(L,"nickase", "knick") :- recognition(L).
rate(L,"exonuclease", "kexoa") :- alpha(L).
rate(L,"exonuclease", "kexob") :- beta(L).
rate(L,"exonuclease", "kexoInh") :- inhibitor(L).
rate(L, "unbind", "kda") :- alpha(L).
rate(L, "unbind", "kdb") :- beta(L).
rate(L, "unbind", "kdInhTthree") :- inhibitor(L).
rate(L, "unbind", "kdInhTone") :- inhibit(L).
rate([_; _; _; _; _; _; _; _; _; _ ; _ # L ],"bind","ka").
}
directive parameters [
  ka = 4.3333e-04;
  kda = 0.0383;
  kdb = 0.0135;
  kdInhTone = 9.5e-5;
  kdInhTthree = 3.5e-5;
  kpol = 0.2833;
  kIpol = 0.1150;
  knick = 0.05;
  kexoa = 0.0053;
  kexob = 0.0062;
  kexoInh = 0.02;
]
directive simulation { final=100000 }
directive deterministic { stiff=true }
directive simulator deterministic
(  5 [<c^*{ "O" } c^ a^ a^* c^* a^ c^ a^* c^ a^ a^*    
       a^ a^ c^ a^ c^* a^ c^ a^* c^ c^* a^>]
| 30 [<a^{ "O" }  a^ c^ a^ c^* a^ c^ a^* c^ c^* a^    
       a^ a^ c^ a^ c^* a^ c^ a^* c^ c^* a^>] 
| 30 [<a^*{ "O" } a^* a^ c^ a^* c^ c^* a^ a^ a^ c^ a^ c^* a^ c^ a^*   
       c^* c^ a^ a^* c^* a^ c^ a^* c^ a^ a^*>]
| 1 [<a^* c^ c^* a^ c^* a^* c^ a^* c^* a^* a^* >] // A
| 1 [<a^ a^* c^* a^ c^* a^* c^ a^ a^* c^* c^ >]  // B
| 1 [<a^ c^* a^* c^ a^* c^* a^* a^* a^* c^ c^* a^ c^* a^* a^ a^>] // Inh
)