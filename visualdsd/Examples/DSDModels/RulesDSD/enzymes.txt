directive rules {
// Classic DSD rules
unbind(P,Q,D!i) :-
  P = C [D!i] [D'!i], toehold(D), 
  Q = C [D] [D'], not adjacent(D!i,_,P).

adjacent(D!i,E!j,P) :- P = C [D!i E!j] [E'!j D'!i].
adjacent(D!i,E!j,P) :- P = C [E!j D!i] [D'!i E'!j].

bind(P1,P2,Q,D!i) :- 
  P1 = C1 [D], P2 = C2 [D'], compl(D, D'), 
  Q = C1 [D!i] | C2 [D'!i], freshBond(D!i, P1|P2).
  
displace(P,Q,E!j,D!i) :-
  P = C [E!j D] [D!i] [D'!i E'!j],
  Q = C [E!j D!i] [D] [D'!i E'!j].

displaceL(P,Q,E!j,D!i) :- 
  P = C [D!i] [D E!j] [E'!j D'!i],
  Q = C [D] [D!i E!j] [E'!j D'!i].

cover(P,Q,E!j,D!i) :-
  P = C [E!j D] [D' E'!j], compl(D, D'), 
  Q = C [E!j D!i] [D'!i E'!j], freshBond(D!i,P).

coverL(P,Q,E!j,D!i) :- 
  P = C [D E!j] [E'!j D'], compl(D, D'), 
  Q = C [D!i E!j] [E'!j D'!i], freshBond(D!i,P).
  
binds(P1,P2,R,D!i,[D#L]) :- bind(P1,P2,Q,D!i), not coverL(Q,_,D!i,_), covers(Q,R,D!i,L).
binds(P1,P2,Q,D!i,[D]) :- bind(P1,P2,Q,D!i), not coverL(Q,_,D!i,_), not cover(Q,_,D!i,_).

displaces(P,R,E!j,[D#L]) :- displace(P,Q,E!j,D!i), displaces(Q,R,D!i,L).
displaces(P,Q,E!j,[D]) :- displace(P,Q,E!j,D!i), not displace(Q,_,D!i,_).

displacesL(P,R,E!j,[D#L]) :- displaceL(P,Q,E!j,D!i), displacesL(Q,R,D!i,L).
displacesL(P,Q,E!j,[D]) :- displaceL(P,Q,E!j,D!i), not displaceL(Q,_,D!i,_).

covers(P,R,E!j,[D#L]) :- cover(P,Q,E!j,D!i), covers(Q,R,D!i,L).
covers(P,Q,E!j,[D]) :- cover(P,Q,E!j,D!i), not cover(Q,_,D!i,_).

coversL(P,R,E!j,[D#L]) :- coverL(P,Q,E!j,D!i), coversL(Q,R,D!i,L).
coversL(P,Q,E!j,[D]) :- coverL(P,Q,E!j,D!i), not coverL(Q,_,D!i,_).

unbinds(P,R,D!i,[D#L]) :- 
  P = C [D!i E!j] [E'!j D'!i], toehold(D), not boundL(D!i,_,P), 
  Q = C [D E!j] [E'!j D'], unbinds(Q,R,E!j,L). 
boundL(D!i,E!j,P) :- P = C [E!j D!i] [D'!i E'!j].
unbinds(P,Q,D!i,[D]) :- unbind(P,Q,D!i).

find(D,Type,Rate):- rate(D,Type,Rate).
find(D,Type,Rate):- default(D,Type,Rate), not rate(D,Type,_).

//order of find and binds clauses could be reversed.
slow(P1, P2, Rate, Q) :- find(L, "bind", Rate), binds(P1,P2,Q,_,L). //, productive(Q,_,_!i,L).
fast(P, Rate, Q) :- displaces(P,Q,_,L), find(L, "displace", Rate).
fast(P, Rate, Q) :- displacesL(P,Q,_,L), find(L, "displace", Rate).
fast(P, Rate, Q) :- covers(P,Q,_,L), find(L, "cover", Rate).
fast(P, Rate, Q) :- coversL(P,Q,_,L), find(L, "cover", Rate).
fast(P, Rate, Q) :- unbinds(P,Q,_,L), find(L, "unbind", Rate).

productive(P,Q,E!j,L) :- displaces(P,Q,E!j,L).
productive(P,Q,E!j,L) :- displacesL(P,Q,E!j,L).
productive(P,Q,E!j,L) :- covers(P,Q,E!j,L).
productive(P,Q,E!j,L) :- coversL(P,Q,E!j,L).

mergestep(P,Q,V) :- fast(P,_,Q), not member(Q,V).
merge(P,P,V) :- not fast(P,_,_).
merge(P,R,V) :- mergestep(P,Q,V), merge(Q,R,[Q#V]).

infinite([P1; P2], Rate, R) :- slow(P1, P2, Rate, Q), merge(Q,R,[(P1|P2);Q]).
infinite([P], Rate, R) :- slow(P, Rate, Q), merge(Q,R,[P;Q]).

detailed([P1; P2], Rate, Q):- slow(P1, P2, Rate, Q).
detailed([P], Rate, Q) :- slow(P, Rate, Q).
detailed([P], Rate, Q) :- fast(P, Rate, Q).

default([_],"unbind","unbind").
default(_,"bind","bind").
default(_,"displace",1.0).
default(_,"cover",1.0).

//The following specifies detailed compilation mode
reaction([P1; P2], Rate, R) :- detailed([P1; P2], Rate, R).
reaction([P], Rate, R) :- detailed([P], Rate, R).

// Enzymatic rules
polymerase(P,Q,A!i,B!j) :-
  P = C [A!i>] [B' A'!i], compl(B, B'),
  Q = C [A!i B!j>] [B'!j A'!i], freshBond(B!j, P).

polymerase(P,Q,A!i,B!j) :- 
  P = C [A!i>] [B'!j A'!i] [B!j],
  Q = C [A!i B!j>] [B'!j A'!i] [B].

polymerases(P,R,A!i,[B#L]) :- 
  polymerase(P,Q,A!i,B!j), polymerases(Q,R,B!j,L).
polymerases(P,Q,A!i,[B]) :- 
  polymerase(P,Q,A!i,B!j), not polymerase(Q,_,_,_).

exonuclease(P,R,A@p,[A#L]) :-
  P = C[<A@p B], unbound(A), 
  Q = C[<B@q], not protected(A), 
  exonuclease(Q,R,B@q,L).

exonuclease(P,Q,A@p,[A]) :- 
  P = C[<A@p>], unbound(A), 
  Q = C[nil], not protected(A).
protected( _ {"O"}).

nickase(P,Q,[A]) :- recognition([A]), 
  P = C [A!i B!j]     [B'!j A'!i],
  Q = C [A!i> | <B!j] [B'!j A'!i].
recognition([a^]).

reaction([P], "polymerase", Q) :- polymerases(P,Q,_,_).
reaction([P], "exonuclease", Q) :- exonuclease(P,Q,_,_).
reaction([P], "nickase", Q) :- nickase(P,Q,_).
}

directive parameters [
  bind = 4.3e-4;  displace = 1;  
  unbind = 0.01; polymerase = 0.3; 
  nickase = 0.05; exonuclease = 0.005; 
]
( 10  [<b^*{"O"} a^*>]   
| 1  [<a^>] )